<?php
namespace ;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class PathChildrenCacheStartMode {
  const NORMAL = 0;
  const BUILD_INITIAL_CACHE = 1;
  const POST_INITIALIZED_EVENT = 2;
  static public $__names = array(
    0 => 'NORMAL',
    1 => 'BUILD_INITIAL_CACHE',
    2 => 'POST_INITIALIZED_EVENT',
  );
}

final class CreateMode {
  const PERSISTENT = 0;
  const PERSISTENT_SEQUENTIAL = 1;
  const EPHEMERAL = 2;
  const EPHEMERAL_SEQUENTIAL = 3;
  const CONTAINER = 4;
  static public $__names = array(
    0 => 'PERSISTENT',
    1 => 'PERSISTENT_SEQUENTIAL',
    2 => 'EPHEMERAL',
    3 => 'EPHEMERAL_SEQUENTIAL',
    4 => 'CONTAINER',
  );
}

final class CuratorEventType {
  const PING = 0;
  const CREATE = 1;
  const DELETE = 2;
  const EXISTS = 3;
  const GET_DATA = 4;
  const SET_DATA = 5;
  const CHILDREN = 6;
  const SYNC = 7;
  const GET_ACL = 8;
  const SET_ACL = 9;
  const WATCHED = 10;
  const CLOSING = 11;
  const CONNECTION_CONNECTED = 12;
  const CONNECTION_SUSPENDED = 13;
  const CONNECTION_RECONNECTED = 14;
  const CONNECTION_LOST = 15;
  const CONNECTION_READ_ONLY = 16;
  const LEADER = 17;
  const PATH_CHILDREN_CACHE = 18;
  const NODE_CACHE = 19;
  static public $__names = array(
    0 => 'PING',
    1 => 'CREATE',
    2 => 'DELETE',
    3 => 'EXISTS',
    4 => 'GET_DATA',
    5 => 'SET_DATA',
    6 => 'CHILDREN',
    7 => 'SYNC',
    8 => 'GET_ACL',
    9 => 'SET_ACL',
    10 => 'WATCHED',
    11 => 'CLOSING',
    12 => 'CONNECTION_CONNECTED',
    13 => 'CONNECTION_SUSPENDED',
    14 => 'CONNECTION_RECONNECTED',
    15 => 'CONNECTION_LOST',
    16 => 'CONNECTION_READ_ONLY',
    17 => 'LEADER',
    18 => 'PATH_CHILDREN_CACHE',
    19 => 'NODE_CACHE',
  );
}

final class EventType {
  const None = 0;
  const NodeCreated = 1;
  const NodeDeleted = 2;
  const NodeDataChanged = 3;
  const NodeChildrenChanged = 4;
  static public $__names = array(
    0 => 'None',
    1 => 'NodeCreated',
    2 => 'NodeDeleted',
    3 => 'NodeDataChanged',
    4 => 'NodeChildrenChanged',
  );
}

final class KeeperState {
  const Unknown = 0;
  const Disconnected = 1;
  const NoSyncConnected = 2;
  const SyncConnected = 3;
  const AuthFailed = 4;
  const ConnectedReadOnly = 5;
  const SaslAuthenticated = 6;
  const Expired = 7;
  static public $__names = array(
    0 => 'Unknown',
    1 => 'Disconnected',
    2 => 'NoSyncConnected',
    3 => 'SyncConnected',
    4 => 'AuthFailed',
    5 => 'ConnectedReadOnly',
    6 => 'SaslAuthenticated',
    7 => 'Expired',
  );
}

final class PathChildrenCacheEventType {
  const CHILD_ADDED = 0;
  const CHILD_UPDATED = 1;
  const CHILD_REMOVED = 2;
  const CONNECTION_SUSPENDED = 3;
  const CONNECTION_RECONNECTED = 4;
  const CONNECTION_LOST = 5;
  const INITIALIZED = 6;
  static public $__names = array(
    0 => 'CHILD_ADDED',
    1 => 'CHILD_UPDATED',
    2 => 'CHILD_REMOVED',
    3 => 'CONNECTION_SUSPENDED',
    4 => 'CONNECTION_RECONNECTED',
    5 => 'CONNECTION_LOST',
    6 => 'INITIALIZED',
  );
}

final class PersistentEphemeralNodeMode {
  const EPHEMERAL = 0;
  const EPHEMERAL_SEQUENTIAL = 1;
  const PROTECTED_EPHEMERAL = 2;
  const PROTECTED_EPHEMERAL_SEQUENTIAL = 3;
  static public $__names = array(
    0 => 'EPHEMERAL',
    1 => 'EPHEMERAL_SEQUENTIAL',
    2 => 'PROTECTED_EPHEMERAL',
    3 => 'PROTECTED_EPHEMERAL_SEQUENTIAL',
  );
}

final class ExceptionType {
  const GENERAL = 0;
  const ZOOKEEPER = 1;
  const NODE = 2;
  static public $__names = array(
    0 => 'GENERAL',
    1 => 'ZOOKEEPER',
    2 => 'NODE',
  );
}

final class NodeExceptionType {
  const NONODE = 0;
  const BADVERSION = 1;
  const NODEEXISTS = 2;
  const NOTEMPTY = 3;
  static public $__names = array(
    0 => 'NONODE',
    1 => 'BADVERSION',
    2 => 'NODEEXISTS',
    3 => 'NOTEMPTY',
  );
}

final class ZooKeeperExceptionType {
  const SYSTEMERROR = 0;
  const RUNTIMEINCONSISTENCY = 1;
  const DATAINCONSISTENCY = 2;
  const CONNECTIONLOSS = 3;
  const MARSHALLINGERROR = 4;
  const UNIMPLEMENTED = 5;
  const OPERATIONTIMEOUT = 6;
  const BADARGUMENTS = 7;
  const APIERROR = 8;
  const NOAUTH = 9;
  const NOCHILDRENFOREPHEMERALS = 10;
  const INVALIDACL = 11;
  const AUTHFAILED = 12;
  const SESSIONEXPIRED = 13;
  const INVALIDCALLBACK = 14;
  const SESSIONMOVED = 15;
  const NOTREADONLY = 16;
  static public $__names = array(
    0 => 'SYSTEMERROR',
    1 => 'RUNTIMEINCONSISTENCY',
    2 => 'DATAINCONSISTENCY',
    3 => 'CONNECTIONLOSS',
    4 => 'MARSHALLINGERROR',
    5 => 'UNIMPLEMENTED',
    6 => 'OPERATIONTIMEOUT',
    7 => 'BADARGUMENTS',
    8 => 'APIERROR',
    9 => 'NOAUTH',
    10 => 'NOCHILDRENFOREPHEMERALS',
    11 => 'INVALIDACL',
    12 => 'AUTHFAILED',
    13 => 'SESSIONEXPIRED',
    14 => 'INVALIDCALLBACK',
    15 => 'SESSIONMOVED',
    16 => 'NOTREADONLY',
  );
}

final class DiscoveryInstanceType {
  const DYNAMIC = 0;
  const STATIC = 1;
  const PERMANENT = 2;
  static public $__names = array(
    0 => 'DYNAMIC',
    1 => 'STATIC',
    2 => 'PERMANENT',
  );
}

final class ProviderStrategyType {
  const RANDOM = 0;
  const STICKY_RANDOM = 1;
  const STICKY_ROUND_ROBIN = 2;
  const ROUND_ROBIN = 3;
  static public $__names = array(
    0 => 'RANDOM',
    1 => 'STICKY_RANDOM',
    2 => 'STICKY_ROUND_ROBIN',
    3 => 'ROUND_ROBIN',
  );
}

class CuratorProjection {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'CuratorProjection';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorProjection');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ExistsSpec {
  static $_TSPEC;

  /**
   * @var string
   */
  public $path = null;
  /**
   * @var bool
   */
  public $watched = null;
  /**
   * @var string
   */
  public $asyncContext = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'watched',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'asyncContext',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['watched'])) {
        $this->watched = $vals['watched'];
      }
      if (isset($vals['asyncContext'])) {
        $this->asyncContext = $vals['asyncContext'];
      }
    }
  }

  public function getName() {
    return 'ExistsSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->watched);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->asyncContext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ExistsSpec');
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 1);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->watched !== null) {
      $xfer += $output->writeFieldBegin('watched', TType::BOOL, 2);
      $xfer += $output->writeBool($this->watched);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->asyncContext !== null) {
      $xfer += $output->writeFieldBegin('asyncContext', TType::STRING, 3);
      $xfer += $output->writeString($this->asyncContext);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetChildrenSpec {
  static $_TSPEC;

  /**
   * @var string
   */
  public $path = null;
  /**
   * @var bool
   */
  public $watched = null;
  /**
   * @var string
   */
  public $asyncContext = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'watched',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'asyncContext',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['watched'])) {
        $this->watched = $vals['watched'];
      }
      if (isset($vals['asyncContext'])) {
        $this->asyncContext = $vals['asyncContext'];
      }
    }
  }

  public function getName() {
    return 'GetChildrenSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->watched);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->asyncContext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetChildrenSpec');
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 1);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->watched !== null) {
      $xfer += $output->writeFieldBegin('watched', TType::BOOL, 2);
      $xfer += $output->writeBool($this->watched);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->asyncContext !== null) {
      $xfer += $output->writeFieldBegin('asyncContext', TType::STRING, 3);
      $xfer += $output->writeString($this->asyncContext);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GetDataSpec {
  static $_TSPEC;

  /**
   * @var string
   */
  public $path = null;
  /**
   * @var bool
   */
  public $watched = null;
  /**
   * @var string
   */
  public $asyncContext = null;
  /**
   * @var bool
   */
  public $decompressed = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'watched',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'asyncContext',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'decompressed',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['watched'])) {
        $this->watched = $vals['watched'];
      }
      if (isset($vals['asyncContext'])) {
        $this->asyncContext = $vals['asyncContext'];
      }
      if (isset($vals['decompressed'])) {
        $this->decompressed = $vals['decompressed'];
      }
    }
  }

  public function getName() {
    return 'GetDataSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->watched);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->asyncContext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->decompressed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GetDataSpec');
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 1);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->watched !== null) {
      $xfer += $output->writeFieldBegin('watched', TType::BOOL, 2);
      $xfer += $output->writeBool($this->watched);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->asyncContext !== null) {
      $xfer += $output->writeFieldBegin('asyncContext', TType::STRING, 3);
      $xfer += $output->writeString($this->asyncContext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->decompressed !== null) {
      $xfer += $output->writeFieldBegin('decompressed', TType::BOOL, 4);
      $xfer += $output->writeBool($this->decompressed);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LeaderEvent {
  static $_TSPEC;

  /**
   * @var string
   */
  public $path = null;
  /**
   * @var string
   */
  public $participantId = null;
  /**
   * @var bool
   */
  public $isLeader = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'participantId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'isLeader',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['participantId'])) {
        $this->participantId = $vals['participantId'];
      }
      if (isset($vals['isLeader'])) {
        $this->isLeader = $vals['isLeader'];
      }
    }
  }

  public function getName() {
    return 'LeaderEvent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->participantId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isLeader);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LeaderEvent');
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 1);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->participantId !== null) {
      $xfer += $output->writeFieldBegin('participantId', TType::STRING, 2);
      $xfer += $output->writeString($this->participantId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isLeader !== null) {
      $xfer += $output->writeFieldBegin('isLeader', TType::BOOL, 3);
      $xfer += $output->writeBool($this->isLeader);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LeaderProjection {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'LeaderProjection';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LeaderProjection');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LeaderResult {
  static $_TSPEC;

  /**
   * @var \LeaderProjection
   */
  public $projection = null;
  /**
   * @var bool
   */
  public $isLeader = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\LeaderProjection',
          ),
        2 => array(
          'var' => 'isLeader',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['isLeader'])) {
        $this->isLeader = $vals['isLeader'];
      }
    }
  }

  public function getName() {
    return 'LeaderResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \LeaderProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isLeader);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LeaderResult');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isLeader !== null) {
      $xfer += $output->writeFieldBegin('isLeader', TType::BOOL, 2);
      $xfer += $output->writeBool($this->isLeader);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LeaseProjection {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'LeaseProjection';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LeaseProjection');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class LockProjection {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'LockProjection';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('LockProjection');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NodeCacheProjection {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'NodeCacheProjection';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NodeCacheProjection');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OptionalChildrenList {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $children = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'children',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['children'])) {
        $this->children = $vals['children'];
      }
    }
  }

  public function getName() {
    return 'OptionalChildrenList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->children = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->children []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OptionalChildrenList');
    if ($this->children !== null) {
      if (!is_array($this->children)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('children', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->children));
        {
          foreach ($this->children as $iter6)
          {
            $xfer += $output->writeString($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OptionalData {
  static $_TSPEC;

  /**
   * @var string
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'data',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'OptionalData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OptionalData');
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::STRING, 1);
      $xfer += $output->writeString($this->data);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OptionalLockProjection {
  static $_TSPEC;

  /**
   * @var \LockProjection
   */
  public $lockProjection = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lockProjection',
          'type' => TType::STRUCT,
          'class' => '\LockProjection',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['lockProjection'])) {
        $this->lockProjection = $vals['lockProjection'];
      }
    }
  }

  public function getName() {
    return 'OptionalLockProjection';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->lockProjection = new \LockProjection();
            $xfer += $this->lockProjection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OptionalLockProjection');
    if ($this->lockProjection !== null) {
      if (!is_object($this->lockProjection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lockProjection', TType::STRUCT, 1);
      $xfer += $this->lockProjection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OptionalPath {
  static $_TSPEC;

  /**
   * @var string
   */
  public $path = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
    }
  }

  public function getName() {
    return 'OptionalPath';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OptionalPath');
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 1);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PathChildrenCacheProjection {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'PathChildrenCacheProjection';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PathChildrenCacheProjection');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PersistentEphemeralNodeProjection {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'PersistentEphemeralNodeProjection';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PersistentEphemeralNodeProjection');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Id {
  static $_TSPEC;

  /**
   * @var string
   */
  public $scheme = null;
  /**
   * @var string
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'scheme',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['scheme'])) {
        $this->scheme = $vals['scheme'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'Id';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->scheme);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Id');
    if ($this->scheme !== null) {
      $xfer += $output->writeFieldBegin('scheme', TType::STRING, 1);
      $xfer += $output->writeString($this->scheme);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 2);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Participant {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var bool
   */
  public $isLeader = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'isLeader',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['isLeader'])) {
        $this->isLeader = $vals['isLeader'];
      }
    }
  }

  public function getName() {
    return 'Participant';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isLeader);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Participant');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isLeader !== null) {
      $xfer += $output->writeFieldBegin('isLeader', TType::BOOL, 2);
      $xfer += $output->writeBool($this->isLeader);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Stat {
  static $_TSPEC;

  /**
   * @var int
   */
  public $czxid = null;
  /**
   * @var int
   */
  public $mzxid = null;
  /**
   * @var int
   */
  public $ctime = null;
  /**
   * @var int
   */
  public $mtime = null;
  /**
   * @var int
   */
  public $version = null;
  /**
   * @var int
   */
  public $cversion = null;
  /**
   * @var int
   */
  public $aversion = null;
  /**
   * @var int
   */
  public $ephemeralOwner = null;
  /**
   * @var int
   */
  public $dataLength = null;
  /**
   * @var int
   */
  public $numChildren = null;
  /**
   * @var int
   */
  public $pzxid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'czxid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'mzxid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'ctime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'mtime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'cversion',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'aversion',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'ephemeralOwner',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'dataLength',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'numChildren',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'pzxid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['czxid'])) {
        $this->czxid = $vals['czxid'];
      }
      if (isset($vals['mzxid'])) {
        $this->mzxid = $vals['mzxid'];
      }
      if (isset($vals['ctime'])) {
        $this->ctime = $vals['ctime'];
      }
      if (isset($vals['mtime'])) {
        $this->mtime = $vals['mtime'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['cversion'])) {
        $this->cversion = $vals['cversion'];
      }
      if (isset($vals['aversion'])) {
        $this->aversion = $vals['aversion'];
      }
      if (isset($vals['ephemeralOwner'])) {
        $this->ephemeralOwner = $vals['ephemeralOwner'];
      }
      if (isset($vals['dataLength'])) {
        $this->dataLength = $vals['dataLength'];
      }
      if (isset($vals['numChildren'])) {
        $this->numChildren = $vals['numChildren'];
      }
      if (isset($vals['pzxid'])) {
        $this->pzxid = $vals['pzxid'];
      }
    }
  }

  public function getName() {
    return 'Stat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->czxid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->mzxid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ctime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->mtime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cversion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->aversion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ephemeralOwner);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->dataLength);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->numChildren);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->pzxid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Stat');
    if ($this->czxid !== null) {
      $xfer += $output->writeFieldBegin('czxid', TType::I64, 1);
      $xfer += $output->writeI64($this->czxid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mzxid !== null) {
      $xfer += $output->writeFieldBegin('mzxid', TType::I64, 2);
      $xfer += $output->writeI64($this->mzxid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ctime !== null) {
      $xfer += $output->writeFieldBegin('ctime', TType::I64, 3);
      $xfer += $output->writeI64($this->ctime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mtime !== null) {
      $xfer += $output->writeFieldBegin('mtime', TType::I64, 4);
      $xfer += $output->writeI64($this->mtime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 5);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cversion !== null) {
      $xfer += $output->writeFieldBegin('cversion', TType::I32, 6);
      $xfer += $output->writeI32($this->cversion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aversion !== null) {
      $xfer += $output->writeFieldBegin('aversion', TType::I32, 7);
      $xfer += $output->writeI32($this->aversion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ephemeralOwner !== null) {
      $xfer += $output->writeFieldBegin('ephemeralOwner', TType::I64, 8);
      $xfer += $output->writeI64($this->ephemeralOwner);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataLength !== null) {
      $xfer += $output->writeFieldBegin('dataLength', TType::I32, 9);
      $xfer += $output->writeI32($this->dataLength);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numChildren !== null) {
      $xfer += $output->writeFieldBegin('numChildren', TType::I32, 10);
      $xfer += $output->writeI32($this->numChildren);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pzxid !== null) {
      $xfer += $output->writeFieldBegin('pzxid', TType::I64, 11);
      $xfer += $output->writeI64($this->pzxid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WatchedEvent {
  static $_TSPEC;

  /**
   * @var int
   */
  public $keeperState = null;
  /**
   * @var int
   */
  public $eventType = null;
  /**
   * @var string
   */
  public $path = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'keeperState',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'eventType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['keeperState'])) {
        $this->keeperState = $vals['keeperState'];
      }
      if (isset($vals['eventType'])) {
        $this->eventType = $vals['eventType'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
    }
  }

  public function getName() {
    return 'WatchedEvent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->keeperState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eventType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WatchedEvent');
    if ($this->keeperState !== null) {
      $xfer += $output->writeFieldBegin('keeperState', TType::I32, 1);
      $xfer += $output->writeI32($this->keeperState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventType !== null) {
      $xfer += $output->writeFieldBegin('eventType', TType::I32, 2);
      $xfer += $output->writeI32($this->eventType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 3);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Version {
  static $_TSPEC;

  /**
   * @var int
   */
  public $version = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
    }
  }

  public function getName() {
    return 'Version';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Version');
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 1);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryProjection {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryProjection';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryProjection');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryProviderProjection {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryProviderProjection';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryProviderProjection');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CreateSpec {
  static $_TSPEC;

  /**
   * @var string
   */
  public $path = null;
  /**
   * @var string
   */
  public $data = null;
  /**
   * @var int
   */
  public $mode = null;
  /**
   * @var string
   */
  public $asyncContext = null;
  /**
   * @var bool
   */
  public $compressed = null;
  /**
   * @var bool
   */
  public $creatingParentsIfNeeded = null;
  /**
   * @var bool
   */
  public $withProtection = null;
  /**
   * @var bool
   */
  public $creatingParentContainersIfNeeded = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'data',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'mode',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'asyncContext',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'compressed',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'creatingParentsIfNeeded',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'withProtection',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'creatingParentContainersIfNeeded',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
      if (isset($vals['mode'])) {
        $this->mode = $vals['mode'];
      }
      if (isset($vals['asyncContext'])) {
        $this->asyncContext = $vals['asyncContext'];
      }
      if (isset($vals['compressed'])) {
        $this->compressed = $vals['compressed'];
      }
      if (isset($vals['creatingParentsIfNeeded'])) {
        $this->creatingParentsIfNeeded = $vals['creatingParentsIfNeeded'];
      }
      if (isset($vals['withProtection'])) {
        $this->withProtection = $vals['withProtection'];
      }
      if (isset($vals['creatingParentContainersIfNeeded'])) {
        $this->creatingParentContainersIfNeeded = $vals['creatingParentContainersIfNeeded'];
      }
    }
  }

  public function getName() {
    return 'CreateSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->asyncContext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->compressed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->creatingParentsIfNeeded);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->withProtection);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->creatingParentContainersIfNeeded);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CreateSpec');
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 1);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::STRING, 2);
      $xfer += $output->writeString($this->data);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mode !== null) {
      $xfer += $output->writeFieldBegin('mode', TType::I32, 3);
      $xfer += $output->writeI32($this->mode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->asyncContext !== null) {
      $xfer += $output->writeFieldBegin('asyncContext', TType::STRING, 4);
      $xfer += $output->writeString($this->asyncContext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compressed !== null) {
      $xfer += $output->writeFieldBegin('compressed', TType::BOOL, 5);
      $xfer += $output->writeBool($this->compressed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creatingParentsIfNeeded !== null) {
      $xfer += $output->writeFieldBegin('creatingParentsIfNeeded', TType::BOOL, 6);
      $xfer += $output->writeBool($this->creatingParentsIfNeeded);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->withProtection !== null) {
      $xfer += $output->writeFieldBegin('withProtection', TType::BOOL, 7);
      $xfer += $output->writeBool($this->withProtection);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->creatingParentContainersIfNeeded !== null) {
      $xfer += $output->writeFieldBegin('creatingParentContainersIfNeeded', TType::BOOL, 8);
      $xfer += $output->writeBool($this->creatingParentContainersIfNeeded);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteSpec {
  static $_TSPEC;

  /**
   * @var string
   */
  public $path = null;
  /**
   * @var bool
   */
  public $guaranteed = null;
  /**
   * @var string
   */
  public $asyncContext = null;
  /**
   * @var \Version
   */
  public $version = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'guaranteed',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'asyncContext',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'version',
          'type' => TType::STRUCT,
          'class' => '\Version',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['guaranteed'])) {
        $this->guaranteed = $vals['guaranteed'];
      }
      if (isset($vals['asyncContext'])) {
        $this->asyncContext = $vals['asyncContext'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
    }
  }

  public function getName() {
    return 'DeleteSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->guaranteed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->asyncContext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->version = new \Version();
            $xfer += $this->version->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteSpec');
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 1);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->guaranteed !== null) {
      $xfer += $output->writeFieldBegin('guaranteed', TType::BOOL, 2);
      $xfer += $output->writeBool($this->guaranteed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->asyncContext !== null) {
      $xfer += $output->writeFieldBegin('asyncContext', TType::STRING, 3);
      $xfer += $output->writeString($this->asyncContext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      if (!is_object($this->version)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('version', TType::STRUCT, 4);
      $xfer += $this->version->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OptionalStat {
  static $_TSPEC;

  /**
   * @var \Stat
   */
  public $stat = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'stat',
          'type' => TType::STRUCT,
          'class' => '\Stat',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['stat'])) {
        $this->stat = $vals['stat'];
      }
    }
  }

  public function getName() {
    return 'OptionalStat';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->stat = new \Stat();
            $xfer += $this->stat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OptionalStat');
    if ($this->stat !== null) {
      if (!is_object($this->stat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stat', TType::STRUCT, 1);
      $xfer += $this->stat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Acl {
  static $_TSPEC;

  /**
   * @var int
   */
  public $perms = null;
  /**
   * @var \Id
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'perms',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'id',
          'type' => TType::STRUCT,
          'class' => '\Id',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['perms'])) {
        $this->perms = $vals['perms'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'Acl';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->perms);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->id = new \Id();
            $xfer += $this->id->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Acl');
    if ($this->perms !== null) {
      $xfer += $output->writeFieldBegin('perms', TType::I32, 1);
      $xfer += $output->writeI32($this->perms);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      if (!is_object($this->id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('id', TType::STRUCT, 2);
      $xfer += $this->id->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChildData {
  static $_TSPEC;

  /**
   * @var string
   */
  public $path = null;
  /**
   * @var \Stat
   */
  public $stat = null;
  /**
   * @var string
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'stat',
          'type' => TType::STRUCT,
          'class' => '\Stat',
          ),
        3 => array(
          'var' => 'data',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['stat'])) {
        $this->stat = $vals['stat'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'ChildData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->stat = new \Stat();
            $xfer += $this->stat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChildData');
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 1);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stat !== null) {
      if (!is_object($this->stat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stat', TType::STRUCT, 2);
      $xfer += $this->stat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::STRING, 3);
      $xfer += $output->writeString($this->data);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PathChildrenCacheEvent {
  static $_TSPEC;

  /**
   * @var string
   */
  public $cachedPath = null;
  /**
   * @var int
   */
  public $type = null;
  /**
   * @var \ChildData
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cachedPath',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\ChildData',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cachedPath'])) {
        $this->cachedPath = $vals['cachedPath'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'PathChildrenCacheEvent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cachedPath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->data = new \ChildData();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PathChildrenCacheEvent');
    if ($this->cachedPath !== null) {
      $xfer += $output->writeFieldBegin('cachedPath', TType::STRING, 1);
      $xfer += $output->writeString($this->cachedPath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 3);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SetDataSpec {
  static $_TSPEC;

  /**
   * @var string
   */
  public $path = null;
  /**
   * @var bool
   */
  public $watched = null;
  /**
   * @var string
   */
  public $asyncContext = null;
  /**
   * @var bool
   */
  public $compressed = null;
  /**
   * @var \Version
   */
  public $version = null;
  /**
   * @var string
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'watched',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'asyncContext',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'compressed',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'version',
          'type' => TType::STRUCT,
          'class' => '\Version',
          ),
        6 => array(
          'var' => 'data',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['watched'])) {
        $this->watched = $vals['watched'];
      }
      if (isset($vals['asyncContext'])) {
        $this->asyncContext = $vals['asyncContext'];
      }
      if (isset($vals['compressed'])) {
        $this->compressed = $vals['compressed'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'SetDataSpec';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->watched);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->asyncContext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->compressed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->version = new \Version();
            $xfer += $this->version->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SetDataSpec');
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 1);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->watched !== null) {
      $xfer += $output->writeFieldBegin('watched', TType::BOOL, 2);
      $xfer += $output->writeBool($this->watched);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->asyncContext !== null) {
      $xfer += $output->writeFieldBegin('asyncContext', TType::STRING, 3);
      $xfer += $output->writeString($this->asyncContext);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compressed !== null) {
      $xfer += $output->writeFieldBegin('compressed', TType::BOOL, 4);
      $xfer += $output->writeBool($this->compressed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      if (!is_object($this->version)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('version', TType::STRUCT, 5);
      $xfer += $this->version->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::STRING, 6);
      $xfer += $output->writeString($this->data);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorException extends TException {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $zooKeeperException = null;
  /**
   * @var int
   */
  public $nodeException = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'zooKeeperException',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'nodeException',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['zooKeeperException'])) {
        $this->zooKeeperException = $vals['zooKeeperException'];
      }
      if (isset($vals['nodeException'])) {
        $this->nodeException = $vals['nodeException'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'CuratorException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->zooKeeperException);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->nodeException);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorException');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zooKeeperException !== null) {
      $xfer += $output->writeFieldBegin('zooKeeperException', TType::I32, 2);
      $xfer += $output->writeI32($this->zooKeeperException);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nodeException !== null) {
      $xfer += $output->writeFieldBegin('nodeException', TType::I32, 3);
      $xfer += $output->writeI32($this->nodeException);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 4);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryInstance {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $address = null;
  /**
   * @var int
   */
  public $port = null;
  /**
   * @var int
   */
  public $sslPort = null;
  /**
   * @var string
   */
  public $payload = null;
  /**
   * @var int
   */
  public $registrationTimeUTC = null;
  /**
   * @var int
   */
  public $serviceType = null;
  /**
   * @var string
   */
  public $uriSpec = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'port',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'sslPort',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'payload',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'registrationTimeUTC',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'serviceType',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'uriSpec',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
      if (isset($vals['sslPort'])) {
        $this->sslPort = $vals['sslPort'];
      }
      if (isset($vals['payload'])) {
        $this->payload = $vals['payload'];
      }
      if (isset($vals['registrationTimeUTC'])) {
        $this->registrationTimeUTC = $vals['registrationTimeUTC'];
      }
      if (isset($vals['serviceType'])) {
        $this->serviceType = $vals['serviceType'];
      }
      if (isset($vals['uriSpec'])) {
        $this->uriSpec = $vals['uriSpec'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryInstance';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sslPort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payload);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->registrationTimeUTC);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->serviceType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->uriSpec);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryInstance');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 2);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 3);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 4);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sslPort !== null) {
      $xfer += $output->writeFieldBegin('sslPort', TType::I32, 5);
      $xfer += $output->writeI32($this->sslPort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payload !== null) {
      $xfer += $output->writeFieldBegin('payload', TType::STRING, 6);
      $xfer += $output->writeString($this->payload);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->registrationTimeUTC !== null) {
      $xfer += $output->writeFieldBegin('registrationTimeUTC', TType::I64, 7);
      $xfer += $output->writeI64($this->registrationTimeUTC);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceType !== null) {
      $xfer += $output->writeFieldBegin('serviceType', TType::I32, 8);
      $xfer += $output->writeI32($this->serviceType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->uriSpec !== null) {
      $xfer += $output->writeFieldBegin('uriSpec', TType::STRING, 9);
      $xfer += $output->writeString($this->uriSpec);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorEvent {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type = null;
  /**
   * @var int
   */
  public $resultCode = null;
  /**
   * @var string
   */
  public $path = null;
  /**
   * @var string
   */
  public $context = null;
  /**
   * @var \Stat
   */
  public $stat = null;
  /**
   * @var string
   */
  public $data = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string[]
   */
  public $children = null;
  /**
   * @var \Acl[]
   */
  public $aclList = null;
  /**
   * @var \WatchedEvent
   */
  public $watchedEvent = null;
  /**
   * @var \LeaderEvent
   */
  public $leaderEvent = null;
  /**
   * @var \PathChildrenCacheEvent
   */
  public $childrenCacheEvent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        2 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'resultCode',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'context',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'stat',
          'type' => TType::STRUCT,
          'class' => '\Stat',
          ),
        7 => array(
          'var' => 'data',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'children',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        10 => array(
          'var' => 'aclList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Acl',
            ),
          ),
        11 => array(
          'var' => 'watchedEvent',
          'type' => TType::STRUCT,
          'class' => '\WatchedEvent',
          ),
        12 => array(
          'var' => 'leaderEvent',
          'type' => TType::STRUCT,
          'class' => '\LeaderEvent',
          ),
        13 => array(
          'var' => 'childrenCacheEvent',
          'type' => TType::STRUCT,
          'class' => '\PathChildrenCacheEvent',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['resultCode'])) {
        $this->resultCode = $vals['resultCode'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['context'])) {
        $this->context = $vals['context'];
      }
      if (isset($vals['stat'])) {
        $this->stat = $vals['stat'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['children'])) {
        $this->children = $vals['children'];
      }
      if (isset($vals['aclList'])) {
        $this->aclList = $vals['aclList'];
      }
      if (isset($vals['watchedEvent'])) {
        $this->watchedEvent = $vals['watchedEvent'];
      }
      if (isset($vals['leaderEvent'])) {
        $this->leaderEvent = $vals['leaderEvent'];
      }
      if (isset($vals['childrenCacheEvent'])) {
        $this->childrenCacheEvent = $vals['childrenCacheEvent'];
      }
    }
  }

  public function getName() {
    return 'CuratorEvent';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->resultCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->context);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->stat = new \Stat();
            $xfer += $this->stat->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->children = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readString($elem12);
              $this->children []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->aclList = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $elem18 = new \Acl();
              $xfer += $elem18->read($input);
              $this->aclList []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->watchedEvent = new \WatchedEvent();
            $xfer += $this->watchedEvent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->leaderEvent = new \LeaderEvent();
            $xfer += $this->leaderEvent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRUCT) {
            $this->childrenCacheEvent = new \PathChildrenCacheEvent();
            $xfer += $this->childrenCacheEvent->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorEvent');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 2);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->resultCode !== null) {
      $xfer += $output->writeFieldBegin('resultCode', TType::I32, 3);
      $xfer += $output->writeI32($this->resultCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 4);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->context !== null) {
      $xfer += $output->writeFieldBegin('context', TType::STRING, 5);
      $xfer += $output->writeString($this->context);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stat !== null) {
      if (!is_object($this->stat)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stat', TType::STRUCT, 6);
      $xfer += $this->stat->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::STRING, 7);
      $xfer += $output->writeString($this->data);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 8);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->children !== null) {
      if (!is_array($this->children)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('children', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRING, count($this->children));
        {
          foreach ($this->children as $iter19)
          {
            $xfer += $output->writeString($iter19);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->aclList !== null) {
      if (!is_array($this->aclList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('aclList', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->aclList));
        {
          foreach ($this->aclList as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->watchedEvent !== null) {
      if (!is_object($this->watchedEvent)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('watchedEvent', TType::STRUCT, 11);
      $xfer += $this->watchedEvent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leaderEvent !== null) {
      if (!is_object($this->leaderEvent)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('leaderEvent', TType::STRUCT, 12);
      $xfer += $this->leaderEvent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->childrenCacheEvent !== null) {
      if (!is_object($this->childrenCacheEvent)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('childrenCacheEvent', TType::STRUCT, 13);
      $xfer += $this->childrenCacheEvent->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


