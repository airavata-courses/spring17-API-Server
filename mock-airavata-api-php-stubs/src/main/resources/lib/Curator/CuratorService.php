<?php
namespace ;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface CuratorServiceIf {
  /**
   * @param \CuratorProjection $projection
   * @param string $path
   * @param int $maxWaitMs
   * @return \OptionalLockProjection
   * @throws \CuratorException
   */
  public function acquireLock(\CuratorProjection $projection, $path, $maxWaitMs);
  /**
   * @param \CuratorProjection $projection
   * @param string $path
   * @param int $acquireQty
   * @param int $maxWaitMs
   * @param int $maxLeases
   * @return \LeaseProjection[]
   * @throws \CuratorException
   */
  public function acquireSemaphore(\CuratorProjection $projection, $path, $acquireQty, $maxWaitMs, $maxLeases);
  /**
   * @param \CuratorProjection $projection
   */
  public function closeCuratorProjection(\CuratorProjection $projection);
  /**
   * @param \CuratorProjection $projection
   * @param string $id
   * @return bool
   * @throws \CuratorException
   */
  public function closeGenericProjection(\CuratorProjection $projection, $id);
  /**
   * @param \CuratorProjection $projection
   * @param \CreateSpec $spec
   * @return \OptionalPath
   * @throws \CuratorException
   */
  public function createNode(\CuratorProjection $projection, \CreateSpec $spec);
  /**
   * @param \CuratorProjection $projection
   * @param \DeleteSpec $spec
   * @throws \CuratorException
   */
  public function deleteNode(\CuratorProjection $projection, \DeleteSpec $spec);
  /**
   * @param \CuratorProjection $projection
   * @param \ExistsSpec $spec
   * @return \OptionalStat
   * @throws \CuratorException
   */
  public function exists(\CuratorProjection $projection, \ExistsSpec $spec);
  /**
   * @param \CuratorProjection $projection
   * @param \GetChildrenSpec $spec
   * @return \OptionalChildrenList
   * @throws \CuratorException
   */
  public function getChildren(\CuratorProjection $projection, \GetChildrenSpec $spec);
  /**
   * @param \CuratorProjection $projection
   * @param \GetDataSpec $spec
   * @return \OptionalData
   * @throws \CuratorException
   */
  public function getData(\CuratorProjection $projection, \GetDataSpec $spec);
  /**
   * @param \CuratorProjection $projection
   * @param \LeaderProjection $leaderProjection
   * @return \Participant[]
   * @throws \CuratorException
   */
  public function getLeaderParticipants(\CuratorProjection $projection, \LeaderProjection $leaderProjection);
  /**
   * @param \CuratorProjection $projection
   * @param \NodeCacheProjection $cacheProjection
   * @return \ChildData
   * @throws \CuratorException
   */
  public function getNodeCacheData(\CuratorProjection $projection, \NodeCacheProjection $cacheProjection);
  /**
   * @param \CuratorProjection $projection
   * @param \PathChildrenCacheProjection $cacheProjection
   * @return \ChildData[]
   * @throws \CuratorException
   */
  public function getPathChildrenCacheData(\CuratorProjection $projection, \PathChildrenCacheProjection $cacheProjection);
  /**
   * @param \CuratorProjection $projection
   * @param \PathChildrenCacheProjection $cacheProjection
   * @param string $path
   * @return \ChildData
   * @throws \CuratorException
   */
  public function getPathChildrenCacheDataForPath(\CuratorProjection $projection, \PathChildrenCacheProjection $cacheProjection, $path);
  /**
   * @param \CuratorProjection $projection
   * @param \LeaderProjection $leaderProjection
   * @return bool
   * @throws \CuratorException
   */
  public function isLeader(\CuratorProjection $projection, \LeaderProjection $leaderProjection);
  /**
   * @param string $connectionName
   * @return \CuratorProjection
   * @throws \CuratorException
   */
  public function newCuratorProjection($connectionName);
  /**
   * @param \CuratorProjection $projection
   */
  public function pingCuratorProjection(\CuratorProjection $projection);
  /**
   * @param \CuratorProjection $projection
   * @param \SetDataSpec $spec
   * @return \OptionalStat
   * @throws \CuratorException
   */
  public function setData(\CuratorProjection $projection, \SetDataSpec $spec);
  /**
   * @param \CuratorProjection $projection
   * @param string $path
   * @param string $participantId
   * @param int $waitForLeadershipMs
   * @return \LeaderResult
   * @throws \CuratorException
   */
  public function startLeaderSelector(\CuratorProjection $projection, $path, $participantId, $waitForLeadershipMs);
  /**
   * @param \CuratorProjection $projection
   * @param string $path
   * @param bool $dataIsCompressed
   * @param bool $buildInitial
   * @return \NodeCacheProjection
   * @throws \CuratorException
   */
  public function startNodeCache(\CuratorProjection $projection, $path, $dataIsCompressed, $buildInitial);
  /**
   * @param \CuratorProjection $projection
   * @param string $path
   * @param bool $cacheData
   * @param bool $dataIsCompressed
   * @param int $startMode
   * @return \PathChildrenCacheProjection
   * @throws \CuratorException
   */
  public function startPathChildrenCache(\CuratorProjection $projection, $path, $cacheData, $dataIsCompressed, $startMode);
  /**
   * @param \CuratorProjection $projection
   * @param string $path
   * @param string $data
   * @param int $mode
   * @return \PersistentEphemeralNodeProjection
   * @throws \CuratorException
   */
  public function startPersistentEphemeralNode(\CuratorProjection $projection, $path, $data, $mode);
  /**
   * @param \CuratorProjection $projection
   * @param string $path
   * @param string $asyncContext
   * @throws \CuratorException
   */
  public function sync(\CuratorProjection $projection, $path, $asyncContext);
}

class CuratorServiceClient implements \CuratorServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function acquireLock(\CuratorProjection $projection, $path, $maxWaitMs)
  {
    $this->send_acquireLock($projection, $path, $maxWaitMs);
    return $this->recv_acquireLock();
  }

  public function send_acquireLock(\CuratorProjection $projection, $path, $maxWaitMs)
  {
    $args = new \CuratorService_acquireLock_args();
    $args->projection = $projection;
    $args->path = $path;
    $args->maxWaitMs = $maxWaitMs;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'acquireLock', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('acquireLock', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_acquireLock()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_acquireLock_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_acquireLock_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("acquireLock failed: unknown result");
  }

  public function acquireSemaphore(\CuratorProjection $projection, $path, $acquireQty, $maxWaitMs, $maxLeases)
  {
    $this->send_acquireSemaphore($projection, $path, $acquireQty, $maxWaitMs, $maxLeases);
    return $this->recv_acquireSemaphore();
  }

  public function send_acquireSemaphore(\CuratorProjection $projection, $path, $acquireQty, $maxWaitMs, $maxLeases)
  {
    $args = new \CuratorService_acquireSemaphore_args();
    $args->projection = $projection;
    $args->path = $path;
    $args->acquireQty = $acquireQty;
    $args->maxWaitMs = $maxWaitMs;
    $args->maxLeases = $maxLeases;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'acquireSemaphore', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('acquireSemaphore', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_acquireSemaphore()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_acquireSemaphore_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_acquireSemaphore_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("acquireSemaphore failed: unknown result");
  }

  public function closeCuratorProjection(\CuratorProjection $projection)
  {
    $this->send_closeCuratorProjection($projection);
    $this->recv_closeCuratorProjection();
  }

  public function send_closeCuratorProjection(\CuratorProjection $projection)
  {
    $args = new \CuratorService_closeCuratorProjection_args();
    $args->projection = $projection;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'closeCuratorProjection', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('closeCuratorProjection', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_closeCuratorProjection()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_closeCuratorProjection_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_closeCuratorProjection_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    return;
  }

  public function closeGenericProjection(\CuratorProjection $projection, $id)
  {
    $this->send_closeGenericProjection($projection, $id);
    return $this->recv_closeGenericProjection();
  }

  public function send_closeGenericProjection(\CuratorProjection $projection, $id)
  {
    $args = new \CuratorService_closeGenericProjection_args();
    $args->projection = $projection;
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'closeGenericProjection', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('closeGenericProjection', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_closeGenericProjection()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_closeGenericProjection_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_closeGenericProjection_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("closeGenericProjection failed: unknown result");
  }

  public function createNode(\CuratorProjection $projection, \CreateSpec $spec)
  {
    $this->send_createNode($projection, $spec);
    return $this->recv_createNode();
  }

  public function send_createNode(\CuratorProjection $projection, \CreateSpec $spec)
  {
    $args = new \CuratorService_createNode_args();
    $args->projection = $projection;
    $args->spec = $spec;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'createNode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('createNode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_createNode()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_createNode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_createNode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("createNode failed: unknown result");
  }

  public function deleteNode(\CuratorProjection $projection, \DeleteSpec $spec)
  {
    $this->send_deleteNode($projection, $spec);
    $this->recv_deleteNode();
  }

  public function send_deleteNode(\CuratorProjection $projection, \DeleteSpec $spec)
  {
    $args = new \CuratorService_deleteNode_args();
    $args->projection = $projection;
    $args->spec = $spec;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deleteNode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deleteNode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deleteNode()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_deleteNode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_deleteNode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    return;
  }

  public function exists(\CuratorProjection $projection, \ExistsSpec $spec)
  {
    $this->send_exists($projection, $spec);
    return $this->recv_exists();
  }

  public function send_exists(\CuratorProjection $projection, \ExistsSpec $spec)
  {
    $args = new \CuratorService_exists_args();
    $args->projection = $projection;
    $args->spec = $spec;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'exists', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('exists', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_exists()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_exists_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_exists_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("exists failed: unknown result");
  }

  public function getChildren(\CuratorProjection $projection, \GetChildrenSpec $spec)
  {
    $this->send_getChildren($projection, $spec);
    return $this->recv_getChildren();
  }

  public function send_getChildren(\CuratorProjection $projection, \GetChildrenSpec $spec)
  {
    $args = new \CuratorService_getChildren_args();
    $args->projection = $projection;
    $args->spec = $spec;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getChildren', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getChildren', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getChildren()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_getChildren_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_getChildren_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("getChildren failed: unknown result");
  }

  public function getData(\CuratorProjection $projection, \GetDataSpec $spec)
  {
    $this->send_getData($projection, $spec);
    return $this->recv_getData();
  }

  public function send_getData(\CuratorProjection $projection, \GetDataSpec $spec)
  {
    $args = new \CuratorService_getData_args();
    $args->projection = $projection;
    $args->spec = $spec;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getData', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getData', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getData()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_getData_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_getData_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("getData failed: unknown result");
  }

  public function getLeaderParticipants(\CuratorProjection $projection, \LeaderProjection $leaderProjection)
  {
    $this->send_getLeaderParticipants($projection, $leaderProjection);
    return $this->recv_getLeaderParticipants();
  }

  public function send_getLeaderParticipants(\CuratorProjection $projection, \LeaderProjection $leaderProjection)
  {
    $args = new \CuratorService_getLeaderParticipants_args();
    $args->projection = $projection;
    $args->leaderProjection = $leaderProjection;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getLeaderParticipants', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getLeaderParticipants', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getLeaderParticipants()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_getLeaderParticipants_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_getLeaderParticipants_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("getLeaderParticipants failed: unknown result");
  }

  public function getNodeCacheData(\CuratorProjection $projection, \NodeCacheProjection $cacheProjection)
  {
    $this->send_getNodeCacheData($projection, $cacheProjection);
    return $this->recv_getNodeCacheData();
  }

  public function send_getNodeCacheData(\CuratorProjection $projection, \NodeCacheProjection $cacheProjection)
  {
    $args = new \CuratorService_getNodeCacheData_args();
    $args->projection = $projection;
    $args->cacheProjection = $cacheProjection;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getNodeCacheData', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getNodeCacheData', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getNodeCacheData()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_getNodeCacheData_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_getNodeCacheData_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("getNodeCacheData failed: unknown result");
  }

  public function getPathChildrenCacheData(\CuratorProjection $projection, \PathChildrenCacheProjection $cacheProjection)
  {
    $this->send_getPathChildrenCacheData($projection, $cacheProjection);
    return $this->recv_getPathChildrenCacheData();
  }

  public function send_getPathChildrenCacheData(\CuratorProjection $projection, \PathChildrenCacheProjection $cacheProjection)
  {
    $args = new \CuratorService_getPathChildrenCacheData_args();
    $args->projection = $projection;
    $args->cacheProjection = $cacheProjection;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPathChildrenCacheData', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPathChildrenCacheData', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPathChildrenCacheData()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_getPathChildrenCacheData_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_getPathChildrenCacheData_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("getPathChildrenCacheData failed: unknown result");
  }

  public function getPathChildrenCacheDataForPath(\CuratorProjection $projection, \PathChildrenCacheProjection $cacheProjection, $path)
  {
    $this->send_getPathChildrenCacheDataForPath($projection, $cacheProjection, $path);
    return $this->recv_getPathChildrenCacheDataForPath();
  }

  public function send_getPathChildrenCacheDataForPath(\CuratorProjection $projection, \PathChildrenCacheProjection $cacheProjection, $path)
  {
    $args = new \CuratorService_getPathChildrenCacheDataForPath_args();
    $args->projection = $projection;
    $args->cacheProjection = $cacheProjection;
    $args->path = $path;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getPathChildrenCacheDataForPath', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getPathChildrenCacheDataForPath', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getPathChildrenCacheDataForPath()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_getPathChildrenCacheDataForPath_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_getPathChildrenCacheDataForPath_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("getPathChildrenCacheDataForPath failed: unknown result");
  }

  public function isLeader(\CuratorProjection $projection, \LeaderProjection $leaderProjection)
  {
    $this->send_isLeader($projection, $leaderProjection);
    return $this->recv_isLeader();
  }

  public function send_isLeader(\CuratorProjection $projection, \LeaderProjection $leaderProjection)
  {
    $args = new \CuratorService_isLeader_args();
    $args->projection = $projection;
    $args->leaderProjection = $leaderProjection;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'isLeader', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('isLeader', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_isLeader()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_isLeader_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_isLeader_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("isLeader failed: unknown result");
  }

  public function newCuratorProjection($connectionName)
  {
    $this->send_newCuratorProjection($connectionName);
    return $this->recv_newCuratorProjection();
  }

  public function send_newCuratorProjection($connectionName)
  {
    $args = new \CuratorService_newCuratorProjection_args();
    $args->connectionName = $connectionName;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'newCuratorProjection', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('newCuratorProjection', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_newCuratorProjection()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_newCuratorProjection_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_newCuratorProjection_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("newCuratorProjection failed: unknown result");
  }

  public function pingCuratorProjection(\CuratorProjection $projection)
  {
    $this->send_pingCuratorProjection($projection);
  }

  public function send_pingCuratorProjection(\CuratorProjection $projection)
  {
    $args = new \CuratorService_pingCuratorProjection_args();
    $args->projection = $projection;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pingCuratorProjection', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pingCuratorProjection', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function setData(\CuratorProjection $projection, \SetDataSpec $spec)
  {
    $this->send_setData($projection, $spec);
    return $this->recv_setData();
  }

  public function send_setData(\CuratorProjection $projection, \SetDataSpec $spec)
  {
    $args = new \CuratorService_setData_args();
    $args->projection = $projection;
    $args->spec = $spec;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'setData', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('setData', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_setData()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_setData_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_setData_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("setData failed: unknown result");
  }

  public function startLeaderSelector(\CuratorProjection $projection, $path, $participantId, $waitForLeadershipMs)
  {
    $this->send_startLeaderSelector($projection, $path, $participantId, $waitForLeadershipMs);
    return $this->recv_startLeaderSelector();
  }

  public function send_startLeaderSelector(\CuratorProjection $projection, $path, $participantId, $waitForLeadershipMs)
  {
    $args = new \CuratorService_startLeaderSelector_args();
    $args->projection = $projection;
    $args->path = $path;
    $args->participantId = $participantId;
    $args->waitForLeadershipMs = $waitForLeadershipMs;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'startLeaderSelector', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('startLeaderSelector', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_startLeaderSelector()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_startLeaderSelector_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_startLeaderSelector_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("startLeaderSelector failed: unknown result");
  }

  public function startNodeCache(\CuratorProjection $projection, $path, $dataIsCompressed, $buildInitial)
  {
    $this->send_startNodeCache($projection, $path, $dataIsCompressed, $buildInitial);
    return $this->recv_startNodeCache();
  }

  public function send_startNodeCache(\CuratorProjection $projection, $path, $dataIsCompressed, $buildInitial)
  {
    $args = new \CuratorService_startNodeCache_args();
    $args->projection = $projection;
    $args->path = $path;
    $args->dataIsCompressed = $dataIsCompressed;
    $args->buildInitial = $buildInitial;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'startNodeCache', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('startNodeCache', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_startNodeCache()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_startNodeCache_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_startNodeCache_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("startNodeCache failed: unknown result");
  }

  public function startPathChildrenCache(\CuratorProjection $projection, $path, $cacheData, $dataIsCompressed, $startMode)
  {
    $this->send_startPathChildrenCache($projection, $path, $cacheData, $dataIsCompressed, $startMode);
    return $this->recv_startPathChildrenCache();
  }

  public function send_startPathChildrenCache(\CuratorProjection $projection, $path, $cacheData, $dataIsCompressed, $startMode)
  {
    $args = new \CuratorService_startPathChildrenCache_args();
    $args->projection = $projection;
    $args->path = $path;
    $args->cacheData = $cacheData;
    $args->dataIsCompressed = $dataIsCompressed;
    $args->startMode = $startMode;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'startPathChildrenCache', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('startPathChildrenCache', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_startPathChildrenCache()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_startPathChildrenCache_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_startPathChildrenCache_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("startPathChildrenCache failed: unknown result");
  }

  public function startPersistentEphemeralNode(\CuratorProjection $projection, $path, $data, $mode)
  {
    $this->send_startPersistentEphemeralNode($projection, $path, $data, $mode);
    return $this->recv_startPersistentEphemeralNode();
  }

  public function send_startPersistentEphemeralNode(\CuratorProjection $projection, $path, $data, $mode)
  {
    $args = new \CuratorService_startPersistentEphemeralNode_args();
    $args->projection = $projection;
    $args->path = $path;
    $args->data = $data;
    $args->mode = $mode;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'startPersistentEphemeralNode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('startPersistentEphemeralNode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_startPersistentEphemeralNode()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_startPersistentEphemeralNode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_startPersistentEphemeralNode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("startPersistentEphemeralNode failed: unknown result");
  }

  public function sync(\CuratorProjection $projection, $path, $asyncContext)
  {
    $this->send_sync($projection, $path, $asyncContext);
    $this->recv_sync();
  }

  public function send_sync(\CuratorProjection $projection, $path, $asyncContext)
  {
    $args = new \CuratorService_sync_args();
    $args->projection = $projection;
    $args->path = $path;
    $args->asyncContext = $asyncContext;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sync', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sync', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sync()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\CuratorService_sync_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \CuratorService_sync_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    return;
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class CuratorService_acquireLock_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var string
   */
  public $path = null;
  /**
   * @var int
   */
  public $maxWaitMs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'maxWaitMs',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['maxWaitMs'])) {
        $this->maxWaitMs = $vals['maxWaitMs'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_acquireLock_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxWaitMs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_acquireLock_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 2);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxWaitMs !== null) {
      $xfer += $output->writeFieldBegin('maxWaitMs', TType::I32, 3);
      $xfer += $output->writeI32($this->maxWaitMs);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_acquireLock_result {
  static $_TSPEC;

  /**
   * @var \OptionalLockProjection
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OptionalLockProjection',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_acquireLock_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \OptionalLockProjection();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_acquireLock_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_acquireSemaphore_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var string
   */
  public $path = null;
  /**
   * @var int
   */
  public $acquireQty = null;
  /**
   * @var int
   */
  public $maxWaitMs = null;
  /**
   * @var int
   */
  public $maxLeases = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'acquireQty',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'maxWaitMs',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'maxLeases',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['acquireQty'])) {
        $this->acquireQty = $vals['acquireQty'];
      }
      if (isset($vals['maxWaitMs'])) {
        $this->maxWaitMs = $vals['maxWaitMs'];
      }
      if (isset($vals['maxLeases'])) {
        $this->maxLeases = $vals['maxLeases'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_acquireSemaphore_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->acquireQty);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxWaitMs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxLeases);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_acquireSemaphore_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 2);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->acquireQty !== null) {
      $xfer += $output->writeFieldBegin('acquireQty', TType::I32, 3);
      $xfer += $output->writeI32($this->acquireQty);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxWaitMs !== null) {
      $xfer += $output->writeFieldBegin('maxWaitMs', TType::I32, 4);
      $xfer += $output->writeI32($this->maxWaitMs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxLeases !== null) {
      $xfer += $output->writeFieldBegin('maxLeases', TType::I32, 5);
      $xfer += $output->writeI32($this->maxLeases);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_acquireSemaphore_result {
  static $_TSPEC;

  /**
   * @var \LeaseProjection[]
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\LeaseProjection',
            ),
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_acquireSemaphore_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \LeaseProjection();
              $xfer += $elem26->read($input);
              $this->success []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_acquireSemaphore_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_closeCuratorProjection_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_closeCuratorProjection_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_closeCuratorProjection_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_closeCuratorProjection_result {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'CuratorService_closeCuratorProjection_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_closeCuratorProjection_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_closeGenericProjection_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var string
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_closeGenericProjection_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_closeGenericProjection_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 2);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_closeGenericProjection_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_closeGenericProjection_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_closeGenericProjection_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_createNode_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \CreateSpec
   */
  public $spec = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'spec',
          'type' => TType::STRUCT,
          'class' => '\CreateSpec',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['spec'])) {
        $this->spec = $vals['spec'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_createNode_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->spec = new \CreateSpec();
            $xfer += $this->spec->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_createNode_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spec !== null) {
      if (!is_object($this->spec)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spec', TType::STRUCT, 2);
      $xfer += $this->spec->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_createNode_result {
  static $_TSPEC;

  /**
   * @var \OptionalPath
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OptionalPath',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_createNode_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \OptionalPath();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_createNode_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_deleteNode_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \DeleteSpec
   */
  public $spec = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'spec',
          'type' => TType::STRUCT,
          'class' => '\DeleteSpec',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['spec'])) {
        $this->spec = $vals['spec'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_deleteNode_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->spec = new \DeleteSpec();
            $xfer += $this->spec->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_deleteNode_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spec !== null) {
      if (!is_object($this->spec)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spec', TType::STRUCT, 2);
      $xfer += $this->spec->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_deleteNode_result {
  static $_TSPEC;

  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_deleteNode_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_deleteNode_result');
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_exists_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \ExistsSpec
   */
  public $spec = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'spec',
          'type' => TType::STRUCT,
          'class' => '\ExistsSpec',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['spec'])) {
        $this->spec = $vals['spec'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_exists_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->spec = new \ExistsSpec();
            $xfer += $this->spec->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_exists_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spec !== null) {
      if (!is_object($this->spec)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spec', TType::STRUCT, 2);
      $xfer += $this->spec->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_exists_result {
  static $_TSPEC;

  /**
   * @var \OptionalStat
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OptionalStat',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_exists_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \OptionalStat();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_exists_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_getChildren_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \GetChildrenSpec
   */
  public $spec = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'spec',
          'type' => TType::STRUCT,
          'class' => '\GetChildrenSpec',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['spec'])) {
        $this->spec = $vals['spec'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_getChildren_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->spec = new \GetChildrenSpec();
            $xfer += $this->spec->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_getChildren_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spec !== null) {
      if (!is_object($this->spec)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spec', TType::STRUCT, 2);
      $xfer += $this->spec->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_getChildren_result {
  static $_TSPEC;

  /**
   * @var \OptionalChildrenList
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OptionalChildrenList',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_getChildren_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \OptionalChildrenList();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_getChildren_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_getData_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \GetDataSpec
   */
  public $spec = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'spec',
          'type' => TType::STRUCT,
          'class' => '\GetDataSpec',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['spec'])) {
        $this->spec = $vals['spec'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_getData_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->spec = new \GetDataSpec();
            $xfer += $this->spec->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_getData_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spec !== null) {
      if (!is_object($this->spec)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spec', TType::STRUCT, 2);
      $xfer += $this->spec->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_getData_result {
  static $_TSPEC;

  /**
   * @var \OptionalData
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OptionalData',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_getData_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \OptionalData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_getData_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_getLeaderParticipants_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \LeaderProjection
   */
  public $leaderProjection = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'leaderProjection',
          'type' => TType::STRUCT,
          'class' => '\LeaderProjection',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['leaderProjection'])) {
        $this->leaderProjection = $vals['leaderProjection'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_getLeaderParticipants_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->leaderProjection = new \LeaderProjection();
            $xfer += $this->leaderProjection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_getLeaderParticipants_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leaderProjection !== null) {
      if (!is_object($this->leaderProjection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('leaderProjection', TType::STRUCT, 2);
      $xfer += $this->leaderProjection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_getLeaderParticipants_result {
  static $_TSPEC;

  /**
   * @var \Participant[]
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Participant',
            ),
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_getLeaderParticipants_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $elem33 = new \Participant();
              $xfer += $elem33->read($input);
              $this->success []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_getLeaderParticipants_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_getNodeCacheData_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \NodeCacheProjection
   */
  public $cacheProjection = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'cacheProjection',
          'type' => TType::STRUCT,
          'class' => '\NodeCacheProjection',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['cacheProjection'])) {
        $this->cacheProjection = $vals['cacheProjection'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_getNodeCacheData_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->cacheProjection = new \NodeCacheProjection();
            $xfer += $this->cacheProjection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_getNodeCacheData_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cacheProjection !== null) {
      if (!is_object($this->cacheProjection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cacheProjection', TType::STRUCT, 2);
      $xfer += $this->cacheProjection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_getNodeCacheData_result {
  static $_TSPEC;

  /**
   * @var \ChildData
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\ChildData',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_getNodeCacheData_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \ChildData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_getNodeCacheData_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_getPathChildrenCacheData_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \PathChildrenCacheProjection
   */
  public $cacheProjection = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'cacheProjection',
          'type' => TType::STRUCT,
          'class' => '\PathChildrenCacheProjection',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['cacheProjection'])) {
        $this->cacheProjection = $vals['cacheProjection'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_getPathChildrenCacheData_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->cacheProjection = new \PathChildrenCacheProjection();
            $xfer += $this->cacheProjection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_getPathChildrenCacheData_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cacheProjection !== null) {
      if (!is_object($this->cacheProjection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cacheProjection', TType::STRUCT, 2);
      $xfer += $this->cacheProjection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_getPathChildrenCacheData_result {
  static $_TSPEC;

  /**
   * @var \ChildData[]
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\ChildData',
            ),
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_getPathChildrenCacheData_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \ChildData();
              $xfer += $elem40->read($input);
              $this->success []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_getPathChildrenCacheData_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_getPathChildrenCacheDataForPath_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \PathChildrenCacheProjection
   */
  public $cacheProjection = null;
  /**
   * @var string
   */
  public $path = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'cacheProjection',
          'type' => TType::STRUCT,
          'class' => '\PathChildrenCacheProjection',
          ),
        3 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['cacheProjection'])) {
        $this->cacheProjection = $vals['cacheProjection'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_getPathChildrenCacheDataForPath_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->cacheProjection = new \PathChildrenCacheProjection();
            $xfer += $this->cacheProjection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_getPathChildrenCacheDataForPath_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cacheProjection !== null) {
      if (!is_object($this->cacheProjection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cacheProjection', TType::STRUCT, 2);
      $xfer += $this->cacheProjection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 3);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_getPathChildrenCacheDataForPath_result {
  static $_TSPEC;

  /**
   * @var \ChildData
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\ChildData',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_getPathChildrenCacheDataForPath_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \ChildData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_getPathChildrenCacheDataForPath_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_isLeader_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \LeaderProjection
   */
  public $leaderProjection = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'leaderProjection',
          'type' => TType::STRUCT,
          'class' => '\LeaderProjection',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['leaderProjection'])) {
        $this->leaderProjection = $vals['leaderProjection'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_isLeader_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->leaderProjection = new \LeaderProjection();
            $xfer += $this->leaderProjection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_isLeader_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leaderProjection !== null) {
      if (!is_object($this->leaderProjection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('leaderProjection', TType::STRUCT, 2);
      $xfer += $this->leaderProjection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_isLeader_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_isLeader_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_isLeader_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_newCuratorProjection_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $connectionName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'connectionName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['connectionName'])) {
        $this->connectionName = $vals['connectionName'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_newCuratorProjection_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->connectionName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_newCuratorProjection_args');
    if ($this->connectionName !== null) {
      $xfer += $output->writeFieldBegin('connectionName', TType::STRING, 1);
      $xfer += $output->writeString($this->connectionName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_newCuratorProjection_result {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_newCuratorProjection_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \CuratorProjection();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_newCuratorProjection_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_pingCuratorProjection_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_pingCuratorProjection_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_pingCuratorProjection_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_setData_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \SetDataSpec
   */
  public $spec = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'spec',
          'type' => TType::STRUCT,
          'class' => '\SetDataSpec',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['spec'])) {
        $this->spec = $vals['spec'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_setData_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->spec = new \SetDataSpec();
            $xfer += $this->spec->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_setData_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->spec !== null) {
      if (!is_object($this->spec)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('spec', TType::STRUCT, 2);
      $xfer += $this->spec->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_setData_result {
  static $_TSPEC;

  /**
   * @var \OptionalStat
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OptionalStat',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_setData_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \OptionalStat();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_setData_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_startLeaderSelector_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var string
   */
  public $path = null;
  /**
   * @var string
   */
  public $participantId = null;
  /**
   * @var int
   */
  public $waitForLeadershipMs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'participantId',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'waitForLeadershipMs',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['participantId'])) {
        $this->participantId = $vals['participantId'];
      }
      if (isset($vals['waitForLeadershipMs'])) {
        $this->waitForLeadershipMs = $vals['waitForLeadershipMs'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_startLeaderSelector_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->participantId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->waitForLeadershipMs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_startLeaderSelector_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 2);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->participantId !== null) {
      $xfer += $output->writeFieldBegin('participantId', TType::STRING, 3);
      $xfer += $output->writeString($this->participantId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->waitForLeadershipMs !== null) {
      $xfer += $output->writeFieldBegin('waitForLeadershipMs', TType::I32, 4);
      $xfer += $output->writeI32($this->waitForLeadershipMs);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_startLeaderSelector_result {
  static $_TSPEC;

  /**
   * @var \LeaderResult
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\LeaderResult',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_startLeaderSelector_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \LeaderResult();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_startLeaderSelector_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_startNodeCache_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var string
   */
  public $path = null;
  /**
   * @var bool
   */
  public $dataIsCompressed = null;
  /**
   * @var bool
   */
  public $buildInitial = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'dataIsCompressed',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'buildInitial',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['dataIsCompressed'])) {
        $this->dataIsCompressed = $vals['dataIsCompressed'];
      }
      if (isset($vals['buildInitial'])) {
        $this->buildInitial = $vals['buildInitial'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_startNodeCache_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->dataIsCompressed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->buildInitial);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_startNodeCache_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 2);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataIsCompressed !== null) {
      $xfer += $output->writeFieldBegin('dataIsCompressed', TType::BOOL, 3);
      $xfer += $output->writeBool($this->dataIsCompressed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->buildInitial !== null) {
      $xfer += $output->writeFieldBegin('buildInitial', TType::BOOL, 4);
      $xfer += $output->writeBool($this->buildInitial);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_startNodeCache_result {
  static $_TSPEC;

  /**
   * @var \NodeCacheProjection
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\NodeCacheProjection',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_startNodeCache_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \NodeCacheProjection();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_startNodeCache_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_startPathChildrenCache_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var string
   */
  public $path = null;
  /**
   * @var bool
   */
  public $cacheData = null;
  /**
   * @var bool
   */
  public $dataIsCompressed = null;
  /**
   * @var int
   */
  public $startMode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cacheData',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'dataIsCompressed',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'startMode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['cacheData'])) {
        $this->cacheData = $vals['cacheData'];
      }
      if (isset($vals['dataIsCompressed'])) {
        $this->dataIsCompressed = $vals['dataIsCompressed'];
      }
      if (isset($vals['startMode'])) {
        $this->startMode = $vals['startMode'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_startPathChildrenCache_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->cacheData);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->dataIsCompressed);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->startMode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_startPathChildrenCache_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 2);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cacheData !== null) {
      $xfer += $output->writeFieldBegin('cacheData', TType::BOOL, 3);
      $xfer += $output->writeBool($this->cacheData);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dataIsCompressed !== null) {
      $xfer += $output->writeFieldBegin('dataIsCompressed', TType::BOOL, 4);
      $xfer += $output->writeBool($this->dataIsCompressed);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startMode !== null) {
      $xfer += $output->writeFieldBegin('startMode', TType::I32, 5);
      $xfer += $output->writeI32($this->startMode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_startPathChildrenCache_result {
  static $_TSPEC;

  /**
   * @var \PathChildrenCacheProjection
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\PathChildrenCacheProjection',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_startPathChildrenCache_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \PathChildrenCacheProjection();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_startPathChildrenCache_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_startPersistentEphemeralNode_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var string
   */
  public $path = null;
  /**
   * @var string
   */
  public $data = null;
  /**
   * @var int
   */
  public $mode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'data',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'mode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
      if (isset($vals['mode'])) {
        $this->mode = $vals['mode'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_startPersistentEphemeralNode_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_startPersistentEphemeralNode_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 2);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::STRING, 3);
      $xfer += $output->writeString($this->data);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mode !== null) {
      $xfer += $output->writeFieldBegin('mode', TType::I32, 4);
      $xfer += $output->writeI32($this->mode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_startPersistentEphemeralNode_result {
  static $_TSPEC;

  /**
   * @var \PersistentEphemeralNodeProjection
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\PersistentEphemeralNodeProjection',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_startPersistentEphemeralNode_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \PersistentEphemeralNodeProjection();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_startPersistentEphemeralNode_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_sync_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var string
   */
  public $path = null;
  /**
   * @var string
   */
  public $asyncContext = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'path',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'asyncContext',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['path'])) {
        $this->path = $vals['path'];
      }
      if (isset($vals['asyncContext'])) {
        $this->asyncContext = $vals['asyncContext'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_sync_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->path);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->asyncContext);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_sync_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->path !== null) {
      $xfer += $output->writeFieldBegin('path', TType::STRING, 2);
      $xfer += $output->writeString($this->path);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->asyncContext !== null) {
      $xfer += $output->writeFieldBegin('asyncContext', TType::STRING, 3);
      $xfer += $output->writeString($this->asyncContext);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CuratorService_sync_result {
  static $_TSPEC;

  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'CuratorService_sync_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CuratorService_sync_result');
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


