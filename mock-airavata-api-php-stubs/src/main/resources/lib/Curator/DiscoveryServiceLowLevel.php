<?php
namespace ;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface DiscoveryServiceLowLevelIf {
  /**
   * @param \CuratorProjection $projection
   * @param \DiscoveryProjection $discoveryProjection
   * @param string $name
   * @param string $id
   * @return \DiscoveryInstance
   * @throws \CuratorException
   */
  public function queryForInstance(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, $name, $id);
  /**
   * @param \CuratorProjection $projection
   * @param \DiscoveryProjection $discoveryProjection
   * @param string $name
   * @return \DiscoveryInstance[]
   * @throws \CuratorException
   */
  public function queryForInstances(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, $name);
  /**
   * @param \CuratorProjection $projection
   * @param \DiscoveryProjection $discoveryProjection
   * @return string[]
   * @throws \CuratorException
   */
  public function queryForNames(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection);
  /**
   * @param \CuratorProjection $projection
   * @param \DiscoveryProjection $discoveryProjection
   * @param \DiscoveryInstance $instance
   * @throws \CuratorException
   */
  public function registerInstance(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, \DiscoveryInstance $instance);
  /**
   * @param \CuratorProjection $projection
   * @param \DiscoveryProjection $discoveryProjection
   * @param \DiscoveryInstance $instance
   * @throws \CuratorException
   */
  public function unregisterInstance(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, \DiscoveryInstance $instance);
  /**
   * @param \CuratorProjection $projection
   * @param \DiscoveryProjection $discoveryProjection
   * @param \DiscoveryInstance $instance
   * @throws \CuratorException
   */
  public function updateInstance(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, \DiscoveryInstance $instance);
}

class DiscoveryServiceLowLevelClient implements \DiscoveryServiceLowLevelIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function queryForInstance(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, $name, $id)
  {
    $this->send_queryForInstance($projection, $discoveryProjection, $name, $id);
    return $this->recv_queryForInstance();
  }

  public function send_queryForInstance(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, $name, $id)
  {
    $args = new \DiscoveryServiceLowLevel_queryForInstance_args();
    $args->projection = $projection;
    $args->discoveryProjection = $discoveryProjection;
    $args->name = $name;
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryForInstance', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryForInstance', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryForInstance()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DiscoveryServiceLowLevel_queryForInstance_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DiscoveryServiceLowLevel_queryForInstance_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("queryForInstance failed: unknown result");
  }

  public function queryForInstances(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, $name)
  {
    $this->send_queryForInstances($projection, $discoveryProjection, $name);
    return $this->recv_queryForInstances();
  }

  public function send_queryForInstances(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, $name)
  {
    $args = new \DiscoveryServiceLowLevel_queryForInstances_args();
    $args->projection = $projection;
    $args->discoveryProjection = $discoveryProjection;
    $args->name = $name;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryForInstances', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryForInstances', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryForInstances()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DiscoveryServiceLowLevel_queryForInstances_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DiscoveryServiceLowLevel_queryForInstances_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("queryForInstances failed: unknown result");
  }

  public function queryForNames(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection)
  {
    $this->send_queryForNames($projection, $discoveryProjection);
    return $this->recv_queryForNames();
  }

  public function send_queryForNames(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection)
  {
    $args = new \DiscoveryServiceLowLevel_queryForNames_args();
    $args->projection = $projection;
    $args->discoveryProjection = $discoveryProjection;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'queryForNames', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('queryForNames', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_queryForNames()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DiscoveryServiceLowLevel_queryForNames_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DiscoveryServiceLowLevel_queryForNames_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("queryForNames failed: unknown result");
  }

  public function registerInstance(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, \DiscoveryInstance $instance)
  {
    $this->send_registerInstance($projection, $discoveryProjection, $instance);
    $this->recv_registerInstance();
  }

  public function send_registerInstance(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, \DiscoveryInstance $instance)
  {
    $args = new \DiscoveryServiceLowLevel_registerInstance_args();
    $args->projection = $projection;
    $args->discoveryProjection = $discoveryProjection;
    $args->instance = $instance;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'registerInstance', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('registerInstance', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_registerInstance()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DiscoveryServiceLowLevel_registerInstance_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DiscoveryServiceLowLevel_registerInstance_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    return;
  }

  public function unregisterInstance(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, \DiscoveryInstance $instance)
  {
    $this->send_unregisterInstance($projection, $discoveryProjection, $instance);
    $this->recv_unregisterInstance();
  }

  public function send_unregisterInstance(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, \DiscoveryInstance $instance)
  {
    $args = new \DiscoveryServiceLowLevel_unregisterInstance_args();
    $args->projection = $projection;
    $args->discoveryProjection = $discoveryProjection;
    $args->instance = $instance;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unregisterInstance', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unregisterInstance', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unregisterInstance()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DiscoveryServiceLowLevel_unregisterInstance_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DiscoveryServiceLowLevel_unregisterInstance_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    return;
  }

  public function updateInstance(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, \DiscoveryInstance $instance)
  {
    $this->send_updateInstance($projection, $discoveryProjection, $instance);
    $this->recv_updateInstance();
  }

  public function send_updateInstance(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, \DiscoveryInstance $instance)
  {
    $args = new \DiscoveryServiceLowLevel_updateInstance_args();
    $args->projection = $projection;
    $args->discoveryProjection = $discoveryProjection;
    $args->instance = $instance;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updateInstance', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updateInstance', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updateInstance()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DiscoveryServiceLowLevel_updateInstance_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DiscoveryServiceLowLevel_updateInstance_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    return;
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class DiscoveryServiceLowLevel_queryForInstance_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \DiscoveryProjection
   */
  public $discoveryProjection = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'discoveryProjection',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryProjection',
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['discoveryProjection'])) {
        $this->discoveryProjection = $vals['discoveryProjection'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryServiceLowLevel_queryForInstance_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->discoveryProjection = new \DiscoveryProjection();
            $xfer += $this->discoveryProjection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryServiceLowLevel_queryForInstance_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->discoveryProjection !== null) {
      if (!is_object($this->discoveryProjection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('discoveryProjection', TType::STRUCT, 2);
      $xfer += $this->discoveryProjection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 4);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryServiceLowLevel_queryForInstance_result {
  static $_TSPEC;

  /**
   * @var \DiscoveryInstance
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryInstance',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryServiceLowLevel_queryForInstance_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \DiscoveryInstance();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryServiceLowLevel_queryForInstance_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryServiceLowLevel_queryForInstances_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \DiscoveryProjection
   */
  public $discoveryProjection = null;
  /**
   * @var string
   */
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'discoveryProjection',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryProjection',
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['discoveryProjection'])) {
        $this->discoveryProjection = $vals['discoveryProjection'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryServiceLowLevel_queryForInstances_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->discoveryProjection = new \DiscoveryProjection();
            $xfer += $this->discoveryProjection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryServiceLowLevel_queryForInstances_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->discoveryProjection !== null) {
      if (!is_object($this->discoveryProjection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('discoveryProjection', TType::STRUCT, 2);
      $xfer += $this->discoveryProjection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryServiceLowLevel_queryForInstances_result {
  static $_TSPEC;

  /**
   * @var \DiscoveryInstance[]
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DiscoveryInstance',
            ),
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryServiceLowLevel_queryForInstances_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $elem54 = new \DiscoveryInstance();
              $xfer += $elem54->read($input);
              $this->success []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryServiceLowLevel_queryForInstances_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter55)
          {
            $xfer += $iter55->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryServiceLowLevel_queryForNames_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \DiscoveryProjection
   */
  public $discoveryProjection = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'discoveryProjection',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryProjection',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['discoveryProjection'])) {
        $this->discoveryProjection = $vals['discoveryProjection'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryServiceLowLevel_queryForNames_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->discoveryProjection = new \DiscoveryProjection();
            $xfer += $this->discoveryProjection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryServiceLowLevel_queryForNames_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->discoveryProjection !== null) {
      if (!is_object($this->discoveryProjection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('discoveryProjection', TType::STRUCT, 2);
      $xfer += $this->discoveryProjection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryServiceLowLevel_queryForNames_result {
  static $_TSPEC;

  /**
   * @var string[]
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryServiceLowLevel_queryForNames_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size56 = 0;
            $_etype59 = 0;
            $xfer += $input->readListBegin($_etype59, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $elem61 = null;
              $xfer += $input->readString($elem61);
              $this->success []= $elem61;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryServiceLowLevel_queryForNames_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter62)
          {
            $xfer += $output->writeString($iter62);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryServiceLowLevel_registerInstance_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \DiscoveryProjection
   */
  public $discoveryProjection = null;
  /**
   * @var \DiscoveryInstance
   */
  public $instance = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'discoveryProjection',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryProjection',
          ),
        3 => array(
          'var' => 'instance',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryInstance',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['discoveryProjection'])) {
        $this->discoveryProjection = $vals['discoveryProjection'];
      }
      if (isset($vals['instance'])) {
        $this->instance = $vals['instance'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryServiceLowLevel_registerInstance_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->discoveryProjection = new \DiscoveryProjection();
            $xfer += $this->discoveryProjection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->instance = new \DiscoveryInstance();
            $xfer += $this->instance->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryServiceLowLevel_registerInstance_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->discoveryProjection !== null) {
      if (!is_object($this->discoveryProjection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('discoveryProjection', TType::STRUCT, 2);
      $xfer += $this->discoveryProjection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->instance !== null) {
      if (!is_object($this->instance)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('instance', TType::STRUCT, 3);
      $xfer += $this->instance->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryServiceLowLevel_registerInstance_result {
  static $_TSPEC;

  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryServiceLowLevel_registerInstance_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryServiceLowLevel_registerInstance_result');
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryServiceLowLevel_unregisterInstance_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \DiscoveryProjection
   */
  public $discoveryProjection = null;
  /**
   * @var \DiscoveryInstance
   */
  public $instance = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'discoveryProjection',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryProjection',
          ),
        3 => array(
          'var' => 'instance',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryInstance',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['discoveryProjection'])) {
        $this->discoveryProjection = $vals['discoveryProjection'];
      }
      if (isset($vals['instance'])) {
        $this->instance = $vals['instance'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryServiceLowLevel_unregisterInstance_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->discoveryProjection = new \DiscoveryProjection();
            $xfer += $this->discoveryProjection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->instance = new \DiscoveryInstance();
            $xfer += $this->instance->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryServiceLowLevel_unregisterInstance_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->discoveryProjection !== null) {
      if (!is_object($this->discoveryProjection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('discoveryProjection', TType::STRUCT, 2);
      $xfer += $this->discoveryProjection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->instance !== null) {
      if (!is_object($this->instance)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('instance', TType::STRUCT, 3);
      $xfer += $this->instance->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryServiceLowLevel_unregisterInstance_result {
  static $_TSPEC;

  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryServiceLowLevel_unregisterInstance_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryServiceLowLevel_unregisterInstance_result');
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryServiceLowLevel_updateInstance_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \DiscoveryProjection
   */
  public $discoveryProjection = null;
  /**
   * @var \DiscoveryInstance
   */
  public $instance = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'discoveryProjection',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryProjection',
          ),
        3 => array(
          'var' => 'instance',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryInstance',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['discoveryProjection'])) {
        $this->discoveryProjection = $vals['discoveryProjection'];
      }
      if (isset($vals['instance'])) {
        $this->instance = $vals['instance'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryServiceLowLevel_updateInstance_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->discoveryProjection = new \DiscoveryProjection();
            $xfer += $this->discoveryProjection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->instance = new \DiscoveryInstance();
            $xfer += $this->instance->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryServiceLowLevel_updateInstance_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->discoveryProjection !== null) {
      if (!is_object($this->discoveryProjection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('discoveryProjection', TType::STRUCT, 2);
      $xfer += $this->discoveryProjection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->instance !== null) {
      if (!is_object($this->instance)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('instance', TType::STRUCT, 3);
      $xfer += $this->instance->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryServiceLowLevel_updateInstance_result {
  static $_TSPEC;

  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryServiceLowLevel_updateInstance_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryServiceLowLevel_updateInstance_result');
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


