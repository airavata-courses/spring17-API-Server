<?php
namespace ;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface DiscoveryServiceIf {
  /**
   * @param \CuratorProjection $projection
   * @param \DiscoveryProviderProjection $providerProjection
   * @return \DiscoveryInstance[]
   * @throws \CuratorException
   */
  public function getAllInstances(\CuratorProjection $projection, \DiscoveryProviderProjection $providerProjection);
  /**
   * @param \CuratorProjection $projection
   * @param \DiscoveryProviderProjection $providerProjection
   * @return \DiscoveryInstance
   * @throws \CuratorException
   */
  public function getInstance(\CuratorProjection $projection, \DiscoveryProviderProjection $providerProjection);
  /**
   * @param string $name
   * @param string $payload
   * @param int $port
   * @return \DiscoveryInstance
   * @throws \CuratorException
   */
  public function makeDiscoveryInstance($name, $payload, $port);
  /**
   * @param \CuratorProjection $projection
   * @param \DiscoveryProviderProjection $providerProjection
   * @param string $instanceId
   * @throws \CuratorException
   */
  public function noteError(\CuratorProjection $projection, \DiscoveryProviderProjection $providerProjection, $instanceId);
  /**
   * @param \CuratorProjection $projection
   * @param string $basePath
   * @param \DiscoveryInstance $yourInstance
   * @return \DiscoveryProjection
   * @throws \CuratorException
   */
  public function startDiscovery(\CuratorProjection $projection, $basePath, \DiscoveryInstance $yourInstance);
  /**
   * @param \CuratorProjection $projection
   * @param \DiscoveryProjection $discoveryProjection
   * @param string $serviceName
   * @param int $providerStrategy
   * @param int $downTimeoutMs
   * @param int $downErrorThreshold
   * @return \DiscoveryProviderProjection
   * @throws \CuratorException
   */
  public function startProvider(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, $serviceName, $providerStrategy, $downTimeoutMs, $downErrorThreshold);
}

class DiscoveryServiceClient implements \DiscoveryServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getAllInstances(\CuratorProjection $projection, \DiscoveryProviderProjection $providerProjection)
  {
    $this->send_getAllInstances($projection, $providerProjection);
    return $this->recv_getAllInstances();
  }

  public function send_getAllInstances(\CuratorProjection $projection, \DiscoveryProviderProjection $providerProjection)
  {
    $args = new \DiscoveryService_getAllInstances_args();
    $args->projection = $projection;
    $args->providerProjection = $providerProjection;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAllInstances', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAllInstances', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAllInstances()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DiscoveryService_getAllInstances_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DiscoveryService_getAllInstances_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("getAllInstances failed: unknown result");
  }

  public function getInstance(\CuratorProjection $projection, \DiscoveryProviderProjection $providerProjection)
  {
    $this->send_getInstance($projection, $providerProjection);
    return $this->recv_getInstance();
  }

  public function send_getInstance(\CuratorProjection $projection, \DiscoveryProviderProjection $providerProjection)
  {
    $args = new \DiscoveryService_getInstance_args();
    $args->projection = $projection;
    $args->providerProjection = $providerProjection;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getInstance', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getInstance', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getInstance()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DiscoveryService_getInstance_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DiscoveryService_getInstance_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("getInstance failed: unknown result");
  }

  public function makeDiscoveryInstance($name, $payload, $port)
  {
    $this->send_makeDiscoveryInstance($name, $payload, $port);
    return $this->recv_makeDiscoveryInstance();
  }

  public function send_makeDiscoveryInstance($name, $payload, $port)
  {
    $args = new \DiscoveryService_makeDiscoveryInstance_args();
    $args->name = $name;
    $args->payload = $payload;
    $args->port = $port;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'makeDiscoveryInstance', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('makeDiscoveryInstance', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_makeDiscoveryInstance()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DiscoveryService_makeDiscoveryInstance_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DiscoveryService_makeDiscoveryInstance_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("makeDiscoveryInstance failed: unknown result");
  }

  public function noteError(\CuratorProjection $projection, \DiscoveryProviderProjection $providerProjection, $instanceId)
  {
    $this->send_noteError($projection, $providerProjection, $instanceId);
    $this->recv_noteError();
  }

  public function send_noteError(\CuratorProjection $projection, \DiscoveryProviderProjection $providerProjection, $instanceId)
  {
    $args = new \DiscoveryService_noteError_args();
    $args->projection = $projection;
    $args->providerProjection = $providerProjection;
    $args->instanceId = $instanceId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'noteError', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('noteError', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_noteError()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DiscoveryService_noteError_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DiscoveryService_noteError_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    return;
  }

  public function startDiscovery(\CuratorProjection $projection, $basePath, \DiscoveryInstance $yourInstance)
  {
    $this->send_startDiscovery($projection, $basePath, $yourInstance);
    return $this->recv_startDiscovery();
  }

  public function send_startDiscovery(\CuratorProjection $projection, $basePath, \DiscoveryInstance $yourInstance)
  {
    $args = new \DiscoveryService_startDiscovery_args();
    $args->projection = $projection;
    $args->basePath = $basePath;
    $args->yourInstance = $yourInstance;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'startDiscovery', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('startDiscovery', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_startDiscovery()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DiscoveryService_startDiscovery_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DiscoveryService_startDiscovery_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("startDiscovery failed: unknown result");
  }

  public function startProvider(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, $serviceName, $providerStrategy, $downTimeoutMs, $downErrorThreshold)
  {
    $this->send_startProvider($projection, $discoveryProjection, $serviceName, $providerStrategy, $downTimeoutMs, $downErrorThreshold);
    return $this->recv_startProvider();
  }

  public function send_startProvider(\CuratorProjection $projection, \DiscoveryProjection $discoveryProjection, $serviceName, $providerStrategy, $downTimeoutMs, $downErrorThreshold)
  {
    $args = new \DiscoveryService_startProvider_args();
    $args->projection = $projection;
    $args->discoveryProjection = $discoveryProjection;
    $args->serviceName = $serviceName;
    $args->providerStrategy = $providerStrategy;
    $args->downTimeoutMs = $downTimeoutMs;
    $args->downErrorThreshold = $downErrorThreshold;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'startProvider', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('startProvider', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_startProvider()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\DiscoveryService_startProvider_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \DiscoveryService_startProvider_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex1 !== null) {
      throw $result->ex1;
    }
    throw new \Exception("startProvider failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class DiscoveryService_getAllInstances_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \DiscoveryProviderProjection
   */
  public $providerProjection = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'providerProjection',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryProviderProjection',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['providerProjection'])) {
        $this->providerProjection = $vals['providerProjection'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryService_getAllInstances_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->providerProjection = new \DiscoveryProviderProjection();
            $xfer += $this->providerProjection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryService_getAllInstances_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->providerProjection !== null) {
      if (!is_object($this->providerProjection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('providerProjection', TType::STRUCT, 2);
      $xfer += $this->providerProjection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryService_getAllInstances_result {
  static $_TSPEC;

  /**
   * @var \DiscoveryInstance[]
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\DiscoveryInstance',
            ),
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryService_getAllInstances_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $elem47 = new \DiscoveryInstance();
              $xfer += $elem47->read($input);
              $this->success []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryService_getAllInstances_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter48)
          {
            $xfer += $iter48->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryService_getInstance_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \DiscoveryProviderProjection
   */
  public $providerProjection = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'providerProjection',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryProviderProjection',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['providerProjection'])) {
        $this->providerProjection = $vals['providerProjection'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryService_getInstance_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->providerProjection = new \DiscoveryProviderProjection();
            $xfer += $this->providerProjection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryService_getInstance_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->providerProjection !== null) {
      if (!is_object($this->providerProjection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('providerProjection', TType::STRUCT, 2);
      $xfer += $this->providerProjection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryService_getInstance_result {
  static $_TSPEC;

  /**
   * @var \DiscoveryInstance
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryInstance',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryService_getInstance_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \DiscoveryInstance();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryService_getInstance_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryService_makeDiscoveryInstance_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $payload = null;
  /**
   * @var int
   */
  public $port = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'payload',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'port',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['payload'])) {
        $this->payload = $vals['payload'];
      }
      if (isset($vals['port'])) {
        $this->port = $vals['port'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryService_makeDiscoveryInstance_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payload);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryService_makeDiscoveryInstance_args');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payload !== null) {
      $xfer += $output->writeFieldBegin('payload', TType::STRING, 2);
      $xfer += $output->writeString($this->payload);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->port !== null) {
      $xfer += $output->writeFieldBegin('port', TType::I32, 3);
      $xfer += $output->writeI32($this->port);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryService_makeDiscoveryInstance_result {
  static $_TSPEC;

  /**
   * @var \DiscoveryInstance
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryInstance',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryService_makeDiscoveryInstance_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \DiscoveryInstance();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryService_makeDiscoveryInstance_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryService_noteError_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \DiscoveryProviderProjection
   */
  public $providerProjection = null;
  /**
   * @var string
   */
  public $instanceId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'providerProjection',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryProviderProjection',
          ),
        3 => array(
          'var' => 'instanceId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['providerProjection'])) {
        $this->providerProjection = $vals['providerProjection'];
      }
      if (isset($vals['instanceId'])) {
        $this->instanceId = $vals['instanceId'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryService_noteError_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->providerProjection = new \DiscoveryProviderProjection();
            $xfer += $this->providerProjection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->instanceId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryService_noteError_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->providerProjection !== null) {
      if (!is_object($this->providerProjection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('providerProjection', TType::STRUCT, 2);
      $xfer += $this->providerProjection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->instanceId !== null) {
      $xfer += $output->writeFieldBegin('instanceId', TType::STRING, 3);
      $xfer += $output->writeString($this->instanceId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryService_noteError_result {
  static $_TSPEC;

  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryService_noteError_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryService_noteError_result');
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryService_startDiscovery_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var string
   */
  public $basePath = null;
  /**
   * @var \DiscoveryInstance
   */
  public $yourInstance = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'basePath',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'yourInstance',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryInstance',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['basePath'])) {
        $this->basePath = $vals['basePath'];
      }
      if (isset($vals['yourInstance'])) {
        $this->yourInstance = $vals['yourInstance'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryService_startDiscovery_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->basePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->yourInstance = new \DiscoveryInstance();
            $xfer += $this->yourInstance->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryService_startDiscovery_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->basePath !== null) {
      $xfer += $output->writeFieldBegin('basePath', TType::STRING, 2);
      $xfer += $output->writeString($this->basePath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->yourInstance !== null) {
      if (!is_object($this->yourInstance)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('yourInstance', TType::STRUCT, 3);
      $xfer += $this->yourInstance->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryService_startDiscovery_result {
  static $_TSPEC;

  /**
   * @var \DiscoveryProjection
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryProjection',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryService_startDiscovery_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \DiscoveryProjection();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryService_startDiscovery_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryService_startProvider_args {
  static $_TSPEC;

  /**
   * @var \CuratorProjection
   */
  public $projection = null;
  /**
   * @var \DiscoveryProjection
   */
  public $discoveryProjection = null;
  /**
   * @var string
   */
  public $serviceName = null;
  /**
   * @var int
   */
  public $providerStrategy = null;
  /**
   * @var int
   */
  public $downTimeoutMs = null;
  /**
   * @var int
   */
  public $downErrorThreshold = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projection',
          'type' => TType::STRUCT,
          'class' => '\CuratorProjection',
          ),
        2 => array(
          'var' => 'discoveryProjection',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryProjection',
          ),
        3 => array(
          'var' => 'serviceName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'providerStrategy',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'downTimeoutMs',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'downErrorThreshold',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projection'])) {
        $this->projection = $vals['projection'];
      }
      if (isset($vals['discoveryProjection'])) {
        $this->discoveryProjection = $vals['discoveryProjection'];
      }
      if (isset($vals['serviceName'])) {
        $this->serviceName = $vals['serviceName'];
      }
      if (isset($vals['providerStrategy'])) {
        $this->providerStrategy = $vals['providerStrategy'];
      }
      if (isset($vals['downTimeoutMs'])) {
        $this->downTimeoutMs = $vals['downTimeoutMs'];
      }
      if (isset($vals['downErrorThreshold'])) {
        $this->downErrorThreshold = $vals['downErrorThreshold'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryService_startProvider_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->projection = new \CuratorProjection();
            $xfer += $this->projection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->discoveryProjection = new \DiscoveryProjection();
            $xfer += $this->discoveryProjection->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serviceName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->providerStrategy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->downTimeoutMs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->downErrorThreshold);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryService_startProvider_args');
    if ($this->projection !== null) {
      if (!is_object($this->projection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('projection', TType::STRUCT, 1);
      $xfer += $this->projection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->discoveryProjection !== null) {
      if (!is_object($this->discoveryProjection)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('discoveryProjection', TType::STRUCT, 2);
      $xfer += $this->discoveryProjection->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serviceName !== null) {
      $xfer += $output->writeFieldBegin('serviceName', TType::STRING, 3);
      $xfer += $output->writeString($this->serviceName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->providerStrategy !== null) {
      $xfer += $output->writeFieldBegin('providerStrategy', TType::I32, 4);
      $xfer += $output->writeI32($this->providerStrategy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->downTimeoutMs !== null) {
      $xfer += $output->writeFieldBegin('downTimeoutMs', TType::I32, 5);
      $xfer += $output->writeI32($this->downTimeoutMs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->downErrorThreshold !== null) {
      $xfer += $output->writeFieldBegin('downErrorThreshold', TType::I32, 6);
      $xfer += $output->writeI32($this->downErrorThreshold);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DiscoveryService_startProvider_result {
  static $_TSPEC;

  /**
   * @var \DiscoveryProviderProjection
   */
  public $success = null;
  /**
   * @var \CuratorException
   */
  public $ex1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\DiscoveryProviderProjection',
          ),
        1 => array(
          'var' => 'ex1',
          'type' => TType::STRUCT,
          'class' => '\CuratorException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex1'])) {
        $this->ex1 = $vals['ex1'];
      }
    }
  }

  public function getName() {
    return 'DiscoveryService_startProvider_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \DiscoveryProviderProjection();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex1 = new \CuratorException();
            $xfer += $this->ex1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DiscoveryService_startProvider_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex1 !== null) {
      $xfer += $output->writeFieldBegin('ex1', TType::STRUCT, 1);
      $xfer += $this->ex1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


